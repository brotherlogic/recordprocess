// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recordprocess.proto

/*
Package recordprocessor is a generated protocol buffer package.

It is generated from these files:
	recordprocess.proto

It has these top-level messages:
	Scores
	RecordScore
*/
package recordprocessor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import recordcollection "github.com/brotherlogic/recordcollection/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Scores struct {
	Scores []*RecordScore `protobuf:"bytes,1,rep,name=scores" json:"scores,omitempty"`
}

func (m *Scores) Reset()                    { *m = Scores{} }
func (m *Scores) String() string            { return proto.CompactTextString(m) }
func (*Scores) ProtoMessage()               {}
func (*Scores) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Scores) GetScores() []*RecordScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

type RecordScore struct {
	InstanceId int32                                     `protobuf:"varint,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Rating     int32                                     `protobuf:"varint,2,opt,name=rating" json:"rating,omitempty"`
	Category   recordcollection.ReleaseMetadata_Category `protobuf:"varint,3,opt,name=category,enum=recordcollection.ReleaseMetadata_Category" json:"category,omitempty"`
}

func (m *RecordScore) Reset()                    { *m = RecordScore{} }
func (m *RecordScore) String() string            { return proto.CompactTextString(m) }
func (*RecordScore) ProtoMessage()               {}
func (*RecordScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecordScore) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *RecordScore) GetRating() int32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *RecordScore) GetCategory() recordcollection.ReleaseMetadata_Category {
	if m != nil {
		return m.Category
	}
	return recordcollection.ReleaseMetadata_UNKNOWN
}

func init() {
	proto.RegisterType((*Scores)(nil), "recordprocessor.Scores")
	proto.RegisterType((*RecordScore)(nil), "recordprocessor.RecordScore")
}

func init() { proto.RegisterFile("recordprocess.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x89, 0x8b, 0x45, 0xa6, 0xa0, 0x10, 0x41, 0x8a, 0x08, 0x96, 0x3d, 0x15, 0x0f, 0x29,
	0xac, 0x9e, 0xbd, 0x88, 0x82, 0x07, 0x2f, 0xf1, 0x07, 0x48, 0x3a, 0x1d, 0xba, 0x81, 0xda, 0x59,
	0x26, 0xe3, 0xc1, 0x3f, 0xe1, 0x6f, 0x16, 0xb2, 0x55, 0x74, 0x7b, 0xcb, 0xfb, 0xf2, 0xde, 0x9b,
	0x19, 0x38, 0x17, 0x42, 0x96, 0x7e, 0x27, 0x8c, 0x94, 0x92, 0xdb, 0x09, 0x2b, 0xdb, 0xb3, 0x7f,
	0x90, 0xe5, 0xf2, 0x71, 0x88, 0xba, 0xfd, 0xe8, 0x1c, 0xf2, 0x7b, 0xdb, 0x09, 0xeb, 0x96, 0x64,
	0xe4, 0x21, 0x62, 0xbb, 0x37, 0x22, 0x8f, 0x23, 0xa1, 0x46, 0x9e, 0xda, 0x5c, 0xb0, 0xc0, 0xfb,
	0xde, 0xf5, 0x3d, 0x14, 0xaf, 0xc8, 0x42, 0xc9, 0xde, 0x41, 0x91, 0xf2, 0xab, 0x32, 0xf5, 0xaa,
	0x29, 0x37, 0x57, 0xee, 0x60, 0xa4, 0xf3, 0x59, 0x67, 0xbb, 0x9f, 0xbd, 0xeb, 0x2f, 0x03, 0xe5,
	0x1f, 0x6e, 0xaf, 0xa1, 0x8c, 0x53, 0xd2, 0x30, 0x21, 0xbd, 0xc5, 0xbe, 0x32, 0xb5, 0x69, 0x8e,
	0x3d, 0xfc, 0xa0, 0xe7, 0xde, 0x5e, 0x40, 0x21, 0x41, 0xe3, 0x34, 0x54, 0x47, 0xf9, 0x6f, 0x56,
	0xf6, 0x09, 0x4e, 0x30, 0x28, 0x0d, 0x2c, 0x9f, 0xd5, 0xaa, 0x36, 0xcd, 0xe9, 0xe6, 0xc6, 0x2d,
	0x76, 0xf6, 0x34, 0x52, 0x48, 0xf4, 0x42, 0x1a, 0xfa, 0xa0, 0xc1, 0x3d, 0xcc, 0x09, 0xff, 0x9b,
	0xed, 0x8a, 0x7c, 0xd7, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x58, 0xcd, 0x0d, 0x46,
	0x01, 0x00, 0x00,
}
